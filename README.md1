from fastapi import FastAPI, HTTPException, Depends
import shopify
import openai
import os
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

app = FastAPI()

# Database setup
DATABASE_URL = "postgresql://user:password@localhost/ecom_ai_db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    shopify_token = Column(String, unique=True)
    shop_url = Column(String, unique=True)

Base.metadata.create_all(bind=engine)

# OAuth and Shopify API Setup
SHOPIFY_API_KEY = "your_shopify_api_key"
SHOPIFY_SECRET = "your_shopify_secret"

@app.get("/")
def home():
    return {"message": "Welcome to AI-Powered Shopify Manager"}

@app.post("/connect")
def connect_shop(shop_url: str, token: str, db=Depends(SessionLocal)):
    """ Connect Shopify Store """
    new_user = User(shopify_token=token, shop_url=shop_url)
    db.add(new_user)
    db.commit()
    return {"message": f"Connected to {shop_url} successfully"}

@app.get("/products")
def get_products(shop_url: str, token: str):
    """ Fetch products from Shopify """
    session = shopify.Session(shop_url, "2023-10", token)
    shopify.ShopifyResource.activate_session(session)
    products = shopify.Product.find()
    return {"products": [p.to_dict() for p in products]}

@app.post("/optimize")
def optimize_store(shop_url: str, token: str):
    """ AI-powered Store Optimization """
    session = shopify.Session(shop_url, "2023-10", token)
    shopify.ShopifyResource.activate_session(session)
    
    products = shopify.Product.find()
    product_data = [{"id": p.id, "title": p.title, "description": p.body_html} for p in products]

    ai_prompt = f"Analyze the following products and suggest category improvements:\n{product_data}"
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": ai_prompt}]
    )
    
    suggestions = response["choices"][0]["message"]["content"]
    return {"suggestions": suggestions}

npx create-next-app@latest frontend
cd frontend
npm install axios react-toastify
import { useState } from 'react';
import axios from 'axios';

export default function Home() {
  const [shopUrl, setShopUrl] = useState('');
  const [token, setToken] = useState('');
  const [suggestions, setSuggestions] = useState('');

  const connectShop = async () => {
    try {
      await axios.post("http://localhost:8000/connect", { shop_url: shopUrl, token });
      alert("Shop connected successfully!");
    } catch (error) {
      console.error(error);
    }
  };

  const optimizeStore = async () => {
    try {
      const response = await axios.post("http://localhost:8000/optimize", { shop_url: shopUrl, token });
      setSuggestions(response.data.suggestions);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h1>AI E-Commerce Manager</h1>
      <input type="text" placeholder="Shopify URL" value={shopUrl} onChange={(e) => setShopUrl(e.target.value)} />
      <input type="text" placeholder="Shopify Token" value={token} onChange={(e) => setToken(e.target.value)} />
      <button onClick={connectShop}>Connect Store</button>
      <button onClick={optimizeStore}>Optimize Store</button>
      <pre>{suggestions}</pre>
    </div>
  );
}
FROM python:3.9
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
heroku create ai-shopify-manager
git push heroku main
