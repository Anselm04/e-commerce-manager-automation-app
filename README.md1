from fastapi import FastAPI, HTTPException, Depends
import shopify
import openai
import os
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

app = FastAPI()

# Database setup
DATABASE_URL = "postgresql://user:password@localhost/ecom_ai_db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    shopify_token = Column(String, unique=True)
    shop_url = Column(String, unique=True)

Base.metadata.create_all(bind=engine)

# OAuth and Shopify API Setup
SHOPIFY_API_KEY = "your_shopify_api_key"
SHOPIFY_SECRET = "your_shopify_secret"

@app.get("/")
def home():
    return {"message": "Welcome to AI-Powered Shopify Manager"}

@app.post("/connect")
def connect_shop(shop_url: str, token: str, db=Depends(SessionLocal)):
    """ Connect Shopify Store """
    new_user = User(shopify_token=token, shop_url=shop_url)
    db.add(new_user)
    db.commit()
    return {"message": f"Connected to {shop_url} successfully"}

@app.get("/products")
def get_products(shop_url: str, token: str):
    """ Fetch products from Shopify """
    session = shopify.Session(shop_url, "2023-10", token)
    shopify.ShopifyResource.activate_session(session)
    products = shopify.Product.find()
    return {"products": [p.to_dict() for p in products]}

@app.post("/optimize")
def optimize_store(shop_url: str, token: str):
    """ AI-powered Store Optimization """
    session = shopify.Session(shop_url, "2023-10", token)
    shopify.ShopifyResource.activate_session(session)
    
    products = shopify.Product.find()
    product_data = [{"id": p.id, "title": p.title, "description": p.body_html} for p in products]

    ai_prompt = f"Analyze the following products and suggest category improvements:\n{product_data}"
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": ai_prompt}]
    )
    
    suggestions = response["choices"][0]["message"]["content"]
    return {"suggestions": suggestions}

npx create-next-app@latest frontend
cd frontend
npm install axios react-toastify
import { useState } from 'react';
import axios from 'axios';

export default function Home() {
  const [shopUrl, setShopUrl] = useState('');
  const [token, setToken] = useState('');
  const [suggestions, setSuggestions] = useState('');

  const connectShop = async () => {
    try {
      await axios.post("http://localhost:8000/connect", { shop_url: shopUrl, token });
      alert("Shop connected successfully!");
    } catch (error) {
      console.error(error);
    }
  };

  const optimizeStore = async () => {
    try {
      const response = await axios.post("http://localhost:8000/optimize", { shop_url: shopUrl, token });
      setSuggestions(response.data.suggestions);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h1>AI E-Commerce Manager</h1>
      <input type="text" placeholder="Shopify URL" value={shopUrl} onChange={(e) => setShopUrl(e.target.value)} />
      <input type="text" placeholder="Shopify Token" value={token} onChange={(e) => setToken(e.target.value)} />
      <button onClick={connectShop}>Connect Store</button>
      <button onClick={optimizeStore}>Optimize Store</button>
      <pre>{suggestions}</pre>
    </div>
  );
}
FROM python:3.9
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
heroku create ai-shopify-manager
git push heroku main
"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { ShieldIcon, CheckCircleIcon, InfoIcon, EditIcon, PlusIcon, ExternalLinkIcon, BookOpenIcon } from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"

interface ComplianceRule {
  id: string
  program: string
  name: string
  description: string
  status: "active" | "inactive"
  enforcement: "auto" | "manual"
  severity: "critical" | "high" | "medium" | "low"
  lastUpdated: string
  details?: string[]
}

export function ComplianceRules() {
  const [activeTab, setActiveTab] = useState("amazon")
  const [showEditDialog, setShowEditDialog] = useState(false)
  const [selectedRule, setSelectedRule] = useState<ComplianceRule | null>(null)

  const amazonRules: ComplianceRule[] = [
    {
      id: "amz-1",
      program: "Amazon Associates",
      name: "Disclosure Requirements",
      description: "Proper disclosure of affiliate relationship on all content with Amazon links",
      status: "active",
      enforcement: "auto",
      severity: "critical",
      lastUpdated: "2023-05-10",
      details: [
        "Include a clear and conspicuous disclosure at the beginning of content",
        "Example: 'As an Amazon Associate I earn from qualifying purchases'",
        "Disclosure must be visible before any affiliate links appear",
        "Disclosure must be in a font size that is easily readable",
      ],
    },
    {
      id: "amz-2",
      program: "Amazon Associates",
      name: "Price Display Restrictions",
      description: "Prohibition on displaying specific prices for Amazon products",
      status: "active",
      enforcement: "auto",
      severity: "high",
      lastUpdated: "2023-05-12",
      details: [
        "Do not mention specific prices for Amazon products as they can change",
        "Use relative terms like 'check current price' instead",
        "Avoid phrases like 'currently $X on Amazon'",
        "Price comparisons must be general and not specific",
      ],
    },
    {
      id: "amz-3",
      program: "Amazon Associates",
      name: "Special Link Format",
      description: "Proper formatting and structure of Amazon affiliate links",
      status: "active",
      enforcement: "auto",
      severity: "medium",
      lastUpdated: "2023-05-15",
      details: [
        "Use only approved link formats provided by Amazon",
        "Include your Associate ID in all links",
        "Do not cloak, redirect, or otherwise manipulate affiliate links",
        "Do not use link shorteners that hide the destination URL",
      ],
    },
    {
      id: "amz-4",
      program: "Amazon Associates",
      name: "Prohibited Content",
      description: "Content types not allowed with Amazon affiliate links",
      status: "active",
      enforcement: "manual",
      severity: "critical",
      lastUpdated: "2023-05-08",
      details: [
        "No affiliate links in content promoting violence, discrimination, or illegal activities",
        "No affiliate links in content primarily aimed at children under 13",
        "No affiliate links in content that violates intellectual property rights",
        "No affiliate links in sexually explicit or adult-oriented content",
      ],
    },
    {
      id: "amz-5",
      program: "Amazon Associates",
      name: "Email Marketing Restrictions",
      description: "Rules for using Amazon affiliate links in emails",
      status: "active",
      enforcement: "manual",
      severity: "high",
      lastUpdated: "2023-05-05",
      details: [
        "Do not include Amazon affiliate links in emails",
        "Email content can link to your site which then contains affiliate links",
        "Do not use affiliate links in newsletters",
        "Do not use affiliate links in email marketing campaigns",
      ],
    },
  ]

  const otherRules: ComplianceRule[] = [
    {
      id: "other-1",
      program: "ShareASale",
      name: "Link Disclosure",
      description: "Proper disclosure of affiliate relationship for ShareASale links",
      status: "active",
      enforcement: "auto",
      severity: "high",
      lastUpdated: "2023-05-14",
    },
    {
      id: "other-2",
      program: "Commission Junction",
      name: "Content Guidelines",
      description: "Content quality and relevance requirements for CJ Affiliate links",
      status: "inactive",
      enforcement: "manual",
      severity: "medium",
      lastUpdated: "2023-05-03",
    },
    {
      id: "other-3",
      program: "Impact",
      name: "Tracking Compliance",
      description: "Proper implementation of Impact tracking links and pixels",
      status: "active",
      enforcement: "auto",
      severity: "medium",
      lastUpdated: "2023-05-09",
    },
  ]

  const shopifyRules: ComplianceRule[] = [
    {
      id: "shop-1",
      program: "Shopify",
      name: "Privacy Policy",
      description: "Required privacy policy for Shopify stores",
      status: "active",
      enforcement: "auto",
      severity: "critical",
      lastUpdated: "2023-05-11",
    },
    {
      id: "shop-2",
      program: "Shopify",
      name: "Terms of Service",
      description: "Required terms of service for Shopify stores",
      status: "active",
      enforcement: "auto",
      severity: "high",
      lastUpdated: "2023-05-11",
    },
    {
      id: "shop-3",
      program: "Shopify",
      name: "Return Policy",
      description: "Clear return policy for Shopify stores",
      status: "active",
      enforcement: "manual",
      severity: "medium",
      lastUpdated: "2023-05-07",
    },
  ]

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <Badge className="bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300">Critical</Badge>
      case "high":
        return <Badge className="bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300">High</Badge>
      case "medium":
        return <Badge className="bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">Medium</Badge>
      case "low":
        return <Badge className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">Low</Badge>
      default:
        return <Badge variant="outline">{severity}</Badge>
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "active":
        return <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">Active</Badge>
      case "inactive":
        return <Badge className="bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300">Inactive</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  const getEnforcementBadge = (enforcement: string) => {
    switch (enforcement) {
      case "auto":
        return (
          <Badge className="bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300">Auto-enforced</Badge>
        )
      case "manual":
        return <Badge className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">Manual Review</Badge>
      default:
        return <Badge variant="outline">{enforcement}</Badge>
    }
  }

  const handleEditRule = (rule: ComplianceRule) => {
    setSelectedRule(rule)
    setShowEditDialog(true)
  }

  const renderRulesList = (rules: ComplianceRule[]) => (
    <div className="space-y-4">
      {rules.map((rule) => (
        <Card key={rule.id}>
          <CardContent className="p-4">
            <div className="flex items-start justify-between">
              <div className="space-y-1">
                <div className="flex items-center space-x-2">
                  <h3 className="font-medium">{rule.name}</h3>
                  {getSeverityBadge(rule.severity)}
                </div>
                <p className="text-sm text-muted-foreground">{rule.description}</p>
                <div className="flex items-center space-x-2 pt-1">
                  {getStatusBadge(rule.status)}
                  {getEnforcementBadge(rule.enforcement)}
                  <span className="text-xs text-muted-foreground">Updated: {rule.lastUpdated}</span>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <Switch checked={rule.status === "active"} />
                <Button variant="outline" size="sm" onClick={() => handleEditRule(rule)}>
                  <EditIcon className="h-4 w-4 mr-2" />
                  Edit
                </Button>
              </div>
            </div>

            {rule.details && (
              <Accordion type="single" collapsible className="w-full mt-2">
                <AccordionItem value="details">
                  <AccordionTrigger className="text-sm py-2">View Compliance Details</AccordionTrigger>
                  <AccordionContent>
                    <ul className="space-y-1 text-sm">
                      {rule.details.map((detail, index) => (
                        <li key={index} className="flex items-start">
                          <CheckCircleIcon className="h-4 w-4 text-green-500 mr-2 mt-0.5 shrink-0" />
                          <span>{detail}</span>
                        </li>
                      ))}
                    </ul>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            )}
          </CardContent>
        </Card>
      ))}
      <Button variant="outline" className="w-full">
        <PlusIcon className="h-4 w-4 mr-2" />
        Add Custom Rule
      </Button>
    </div>
  )

  return (
    <>
      <Card className="mb-6">
        <CardContent className="p-4">
          <div className="flex items-start space-x-4">
            <div className="bg-yellow-100 p-2 rounded-full dark:bg-yellow-900">
              <InfoIcon className="h-6 w-6 text-yellow-600 dark:text-yellow-400" />
            </div>
            <div>
              <h3 className="font-medium">Why Compliance Matters</h3>
              <p className="text-sm text-muted-foreground mt-1">
                Maintaining compliance with affiliate program rules is critical to avoid account suspension, commission
                loss, and potential legal issues. Our AI automatically monitors and enforces these rules across all your
                websites and stores.
              </p>
              <div className="flex items-center mt-2">
                <Button variant="link" className="h-auto p-0 text-sm">
                  <BookOpenIcon className="h-4 w-4 mr-1" />
                  Learn more about affiliate compliance
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid grid-cols-3">
          <TabsTrigger value="amazon">Amazon Associates</TabsTrigger>
          <TabsTrigger value="other">Other Affiliate Programs</TabsTrigger>
          <TabsTrigger value="shopify">Shopify Compliance</TabsTrigger>
        </TabsList>

        <TabsContent value="amazon" className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <ShieldIcon className="h-5 w-5 text-green-500" />
              <span className="font-medium">Amazon Associates Program Rules</span>
            </div>
            <Button variant="outline" size="sm">
              <ExternalLinkIcon className="h-4 w-4 mr-2" />
              View Amazon Program Policies
            </Button>
          </div>
          {renderRulesList(amazonRules)}
        </TabsContent>

        <TabsContent value="other" className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <ShieldIcon className="h-5 w-5 text-blue-500" />
              <span className="font-medium">Other Affiliate Program Rules</span>
            </div>
            <Button variant="outline" size="sm">
              <PlusIcon className="h-4 w-4 mr-2" />
              Add Affiliate Program
            </Button>
          </div>
          {renderRulesList(otherRules)}
        </TabsContent>

        <TabsContent value="shopify" className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <ShieldIcon className="h-5 w-5 text-purple-500" />
              <span className="font-medium">Shopify Store Compliance</span>
            </div>
            <Button variant="outline" size="sm">
              <ExternalLinkIcon className="h-4 w-4 mr-2" />
              View Shopify Requirements
            </Button>
          </div>
          {renderRulesList(shopifyRules)}
        </TabsContent>
      </Tabs>

      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Edit Compliance Rule</DialogTitle>
            <DialogDescription>Modify this compliance rule and its enforcement settings.</DialogDescription>
          </DialogHeader>
          {selectedRule && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="rule-name">Rule Name</Label>
                <Input id="rule-name" defaultValue={selectedRule.name} />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="rule-description">Description</Label>
                <Textarea id="rule-description" defaultValue={selectedRule.description} />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="rule-status">Status</Label>
                  <Select defaultValue={selectedRule.status}>
                    <SelectTrigger id="rule-status">
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="active">Active</SelectItem>
                      <SelectItem value="inactive">Inactive</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="rule-enforcement">Enforcement</Label>
                  <Select defaultValue={selectedRule.enforcement}>
                    <SelectTrigger id="rule-enforcement">
                      <SelectValue placeholder="Select enforcement" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="auto">Auto-enforced</SelectItem>
                      <SelectItem value="manual">Manual Review</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="rule-severity">Severity</Label>
                <Select defaultValue={selectedRule.severity}>
                  <SelectTrigger id="rule-severity">
                    <SelectValue placeholder="Select severity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="critical">Critical</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {selectedRule.details && (
                <div className="grid gap-2">
                  <Label htmlFor="rule-details">Compliance Details</Label>
                  <Textarea id="rule-details" rows={6} defaultValue={selectedRule.details.join("\n")} />
                  <p className="text-xs text-muted-foreground">
                    Enter each detail on a new line. These will be displayed as a checklist.
                  </p>
                </div>
              )}
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowEditDialog(false)}>
              Cancel
            </Button>
            <Button onClick={() => setShowEditDialog(false)}>Save Changes</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}

